Ext.ns('Workspace.ui');
Workspace.ui.HtmlEditor = Ext.extend(Ext.form.HtmlEditor, {
	frame : true,
	initComponent : function() {
		Workspace.ui.HtmlEditor.superclass.initComponent.call(this);
		this.addEvents('submit');
	},
	initEditor : function() {
		Workspace.ui.HtmlEditor.superclass.initEditor.call(this);
		if (Ext.isIE) {
			///////////////IE///////////////////////////////
			var iframe = this.container.dom.childNodes[0].lastChild.contentWindow.document;
			iframe.attachEvent('onkeydown', this.onKeydown, this);
		} else {
			//////////////Mozilla///////////////////////////
			var iframe = this.container.dom.childNodes[0].lastChild.contentDocument;;
			iframe.addEventListener('keydown', this.onKeydown, this);
		}
	},
	onKeydown : function(e) {
	},
	/*
	fireSubmit : function(e) {
		if (e.ctrlKey && Ext.EventObject.ENTER == e.getKey()) {
			this.fireEvent('submit', this);
		}
	},
	*/
	/*
    getSelectedText : function(clip){
        var doc = this.getDoc(), selDocFrag;
        var txt = '', hasHTML = false, selNodes = [], ret, html = '';
        if (this.win.getSelection || doc.getSelection){
        console.log('win/doc getSelection');
        // FF, Chrome, Safari
        var sel = this.win.getSelection();
        if (!sel) {
            sel = doc.getSelection();
        }
        if (clip){
            selDocFrag = sel.getRangeAt(0).extractContents();
        }else{
            selDocFrag = this.win.getSelection().getRangeAt(0).cloneContents();
        }
        Ext.each(selDocFrag.childNodes, function(n){
            if (n.nodeType !== 3){
                hasHTML = true;
            }
        });
        if (hasHTML){
            var div = document.createElement ('div');
            div.appendChild (selDocFrag);
            html = div.innerHTML;
            txt = this.win.getSelection()+'';
        }else{
            html = txt = selDocFrag.textContent;
        }
        ret = {
            textContent: txt,
            hasHTML: hasHTML,
            html: html
        };
        } else if (doc.selection){
        // IE
            this.win.focus();
            console.log('doc createRange text');
            txt = doc.selection.createRange();
        if (txt.text !== txt.htmlText){
            hasHTML = true;
        }
        ret = {
            textContent: txt.text,
            hasHTML: hasHTML,
            html: txt.htmlText
        };
        } else {
            console.log('fail');
            return {
            textContent: ''
        };
        }
    
        return ret;
    },
    */
    getCaretSelection : function () {
        var doc = this.getDoc(), selDocFrag;
        if (this.win.getSelection){
	        console.log('win getSelection');
	        // FF, Chrome
	        return this.win.getSelection();
        } else if (doc.getSelection){
	        console.log('doc getSelection');
	        // Safari
	        return this.win.getSelection();
        } else if (doc.selection){
        	// IE
            this.win.focus();
            console.log('doc createRange text');
            return doc.selection.createRange();
        }
    },
    /*
	getSelectionCursor : function(clip) {
		var doc = this.getDoc();
		var ret;
		if (this.win.getSelection || doc.getSelection){
			console.log('win/doc getSelection');
			// FF, Chrome, Safari
			var sel = this.win.getSelection();
			if (!sel) {
			    sel = doc.getSelection();
			}
			var clip = true;
			if (clip){
			    ret = sel.getRangeAt(0).extractContents();
			}else{
			    ret = this.win.getSelection().getRangeAt(0).cloneContents();
			}
		}
		return ret;
	},
	*/
    getCaretPositionRange : function () {
//        var sel = this.getCaretSelection();
//        var pos = sel.getRangeAt(0);
//        return pos;
//      alert('htmlEditor.getCaretPositionRange() start:'+cp.startOffset+'  end:'+cp.endOffset);

//      var pos = cp.startOffset;
        var bookmark = '~';
    	this.syncValue();
		var txtOrigine=this.getEditorBody().innerHTML;
	    var pos = 0;
		try {
//	        this.insertAtCursor(bookmark);

	        var text = bookmark;
	        this.win.focus();
            this.execCmd('InsertHTML', text);

            this.syncValue();
//var sel01 = this.getCaretSelection().getRangeAt(0);
//sel01.text = bookmark;

			var txt=this.getRawValue();
	        pos = txt.search(bookmark);
	        return {startOffset:pos, endOffset:pos};
		} finally {
//console.log('getCaretPositionRange finally 1');
//			this.setValue(txtOrigine);
//console.log('getCaretPositionRange finally 2');
//			this.syncValue();
//console.log('getCaretPositionRange finally 3');

//var doc = this.getDoc(),
//r = doc.selection.createRange();
//console.log('getCaretPositionRange finally 3: r='+r);

//var sel11 = this.getSelectionCursor();

///////////////////
//var sel11 = this.getCaretSelection().getRangeAt(0);
//sel11.expand();
//sel11.text = 't';
//this.syncValue();

this.win.focus();
var a1=this.iframe.contentWindow.getSelection();
var a2=this.iframe.contentWindow.getSelection().setPosition(7,2);
this.insertAtCursor(bookmark+'-'+bookmark);
this.syncValue();
var a3=this.iframe.contentWindow.getSelection().getRangeAt(0);
var a4=this.iframe.contentWindow.getSelection().getRangeAt(0).setStart=10;
//this.iframe.test();
/////////////////////

//this.focus(bookmark, true);
//this.insertAtCursor('-------------->');

//console.log('getCaretPositionRange finally 4');
//			this.setCursorPosition(pos, pos);
//console.log('getCaretPositionRange finally 5');
		}
    }
    /**/
    ,
    insertAtCursor : function(text){
        if(!this.activated){
            return;
        }
        if(Ext.isIE){
            this.win.focus();
            var doc = this.getDoc(),
                r = doc.selection.createRange();
            if(r){
                r.pasteHTML(text);
                this.syncValue();
//                this.deferFocus();
            }
        }else{
            this.win.focus();
            this.execCmd('InsertHTML', text);
//            this.deferFocus();
        }
    }
    /**/

    //http://www.sencha.com/forum/archive/index.php/t-78424.html
    /*
    ,
    _iCaretNative: undefined,
    _isSupported: undefined,
    /**
	 * @private
	 *-/
    isCaretNative: function () {
	    if (typeof this._isCaretNative == 'undefined') {
		    var d = document,
		    o = d.createElement("input");
		    this._isCaretNative = "selectionStart" in o;
		    this._isCaretSupported = this._isCaretNative || (o = d.selection) && !!o.createRange;
	    }
	    return this._isCaretNative
    },
    /**
	 * @private
	 *-/
    isSupported: function () {
	    if (typeof this._isCaretSupported == 'undefined') {
	    	this.isCaretNative();
	    }
	    return this._isCaretSupported
    },
    /**
	 * selects the text of the Element
	 * 
	 * @param {Mixed}
	 *            start Start position of the selection
	 * @param {Number}
	 *            end End position of the selection
	 * @return {}
	 *-/
    setCaret: function (start, end) {
	    if (! (this.dom.nodeName.toLowerCase() == "textarea" || this.dom.nodeName.toLowerCase() == "input")) {
	    	return;
	    }
	    if (typeof start.start != 'undefined') {
		    end = start.end;
		    start = start.start;
	    }
	    if (this.isCaretNative()) {
	    	return this.dom.setSelectionRange(start, end)
	    } else {
		    var o = this.dom;
		    var t = o.createTextRange();
		    end -= start + o.value.slice(start + 1, end).split("\n").length - 1;
		    start -= o.value.slice(0, start).split("\n").length - 1;
		    t.move("character", start),
		    t.moveEnd("character", end),
		    t.select();
	    }
    },
    /**
	 * returns the current Selection of the Element
	 * 
	 * @return {Object} {start: startposition, end: endposition} of the
	 *         selection
	 *-/
    getCaret: function () {
	    var o = this.dom;
	    if (this.isCaretNative()) {
		    return {
			    start: o.selectionStart,
			    end: o.selectionEnd
		    }
	    } else {
		    var s = (this.dom.focus(), document.selection.createRange()),
		    r,
		    start,
		    end,
		    value; // the current selection range is not part of the controll asking
					// for the caret...
		    if (s.parentElement() != o) return {
			    start: 0,
			    end: 0
		    };
		    var isTA = o.nodeName.toLowerCase() == "textarea";
		    if (isTA ? (r = s.duplicate()).moveToElementText(o) : r = o.createTextRange(), !isTA) return r.setEndPoint("EndToStart", s),
		    {
			    start: r.text.length,
			    end: r.text.length + s.text.length
		    };

		    for (var $ = "[###]";
		    (value = o.value).indexOf($) + 1; $ += $);

		    r.setEndPoint("StartToEnd", s),
		    r.text = $ + r.text,
		    end = o.value.indexOf($);
		    s.text = $,
		    start = o.value.indexOf($);
		    if (document.execCommand && document.queryCommandSupported("Undo"))
		    	for (r in {
				    0: 0,
				    0: 0
		    	}) document.execCommand("Undo");

		    return o.value = value,
		    this.setCaret(start, end),
		    {
			    start: start,
			    end: end
		    };
	    }
    },
    /**
	 * Returns the caret Plus the Line, Column nummer and the position Number
	 * 
	 * @return {}
	 *-/
    getCaretPosition: function () {
	    if (! (this.dom.nodeName.toLowerCase() == "textarea" || this.dom.nodeName.toLowerCase() == "input")) {
	    	return;
	    }
	    var c = this.getCaret(),
	    o = this.dom;
	    if (c) {
		    var lines; // = (typeof o.value != 'undefined') ? o.value.split("\n") :
						// o.innerText.split("\n");
		    if (typeof o.value != 'undefined') {
		    	lines = o.value.split("\n");
		    } else {
		    	lines = o.innerText.split("\n");
		    }
		    c.lines = lines.length;
		    var p = c.start,
		    ll = c.lines,
		    len = 0,
		    line = 0;
		    for (; line < ll; line++) {
			    len = lines[line].length + 1;
			    if (p < len) break;
			    p -= len;
		    }
		    line++;
		    c.line = line;
		    c.column = p;
		    c.position = c.start;
	    }
	    return c;
    },
    /**
	 * sets the CaretPosition
	 * 
	 * @param {Number}
	 *            start the beginnig of the selection
	 * @param {Number}
	 *            end the end of the selection
	 *-/
    setCaretPosition: function (start, end) { // FIX start.start ?
	    if (typeof start.start != 'undefined') {
	    	end = start.end;
	    	start = start.start;
	    }
	    if (typeof start != 'undefined') {
	    	this.setCaret(start, end || start);
	    }
    },
    /**
	 * gets the current selected text
	 * 
	 * @return {}
	 *-/
    getCaretText: function () {
	    var o = this.getCaret();
	    return (typeof this.dom.value != 'undefined') ? this.dom.value.slice(o.start, o.end) : '';
    },
    /**
	 * overrides the currently selected Text with an other text
	 * 
	 * @param {String}
	 *            text
	 *-/
    setCaretText: function (text) {
	    var o = this.getCaret(),
	    i = this.dom,
	    s = i.value;
	    if (typeof s == 'undefined') {
	    	return;
	    }
	    i.value = s.slice(0, o.start) + text + s.slice(o.end);
	    this.setCaret(o.start += text.length, o.start);
    }
    */
    }
});
