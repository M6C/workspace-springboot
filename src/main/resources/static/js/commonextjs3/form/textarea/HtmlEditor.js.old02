// NAMESPACE
Ext.ns('Workspace.ui');

Workspace.ui.HtmlEditor = Ext.extend(Ext.form.HtmlEditor, {
	frame : true,
	initComponent : function() {
		Workspace.ui.HtmlEditor.superclass.initComponent.call(this);
		this.addEvents('submit');
	},
	initEditor : function() {
		Workspace.ui.HtmlEditor.superclass.initEditor.call(this);
		if (Ext.isIE) {
			///////////////IE///////////////////////////////
			var iframe = this.container.dom.childNodes[0].lastChild.contentWindow.document;
			iframe.attachEvent('onkeydown', this.onKeydown, this);
			iframe.attachEvent('onkeyup', this.onKeyUp, this);
		} else {
			//////////////Mozilla///////////////////////////
			var iframe = this.container.dom.childNodes[0].lastChild.contentDocument;
			iframe.addEventListener('keydown', this.onKeydown, this);
			iframe.addEventListener('keyup', this.onKeyUp, this);
		}
	},
    enableKeyEvents: true,
	onKeydown : function(e) {
	},
    onKeyUp : function(evt, cmp) {
//		console.log('onKeyUp evt:'+evt);
//		if (evt.ctrlKey && Ext.EventObject.SPACE == evt.keyCode) {
//			var view = evt.currentTarget.defaultView;
//			var selection = view.getSelection();
//			// Selection du début de la ligne jusqu'au curseur
//			//selection.extend(selection.focusNode,0)
//			// Selection du début de textarea jusqu'au curseur
//			selection.extend(view.document.firstChild,0);
//			//view.document.getSelection().setPosition(5)
//			//view.document.childNodes[]
//			//view.document.childElementCount
//			var txt = selection.toString();
//			var pos = txt.length;
//			selection.collapseToEnd();
//	
//	        console.log('Workspace.ui.HtmlEditor onKeyUp pos:'+pos);
//
//	        syncValue();
//			var txt=this.getRawValue();
//			txt=escape(txt);
//
//			var wndClasspathDetail = create_WindowCompletionAction (
//				Ext.getCmp('el_wnd_hot_key_completion'),
//				txt,
//				pos
//			);
//			wndClasspathDetail.show();
//		}
//
//
////	    // Here's how you get the current cursor position/selection range:
////
////	    var s, e;
////	    //var domElement = this.getEl().dom;
////		var field = this.container.dom.childNodes[0].lastChild.contentDocument;;
////
////	    if (Ext.isIE) {
////	        var bookmark = document.selection.createRange().getBookmark();
////	        var selection = field.el.dom.createTextRange();
////	        selection.moveToBookmark(bookmark);
////
////	        var before = field.el.dom.createTextRange();
////	        before.collapse(true);
////	        before.setEndPoint("EndToStart", selection);
////
////	        var selLength = selection.text.length;
////
////	        s = before.text.length;
////	        e = s + selLength;
////
////	    } else {
//////	        s = field.el.dom.selectionStart;
//////	        e = field.el.dom.selectionEnd;
////	        s = domElement.selectionStart;
////	        e = domElement.selectionEnd;
////	    }
////	    console.log('s:'+s+' e:'+e);
	},
    getCaretSelection : function () {
        var doc = this.getDoc(), selDocFrag;
        if (this.win.getSelection){
	        console.log('win getSelection');
	        // FF, Chrome
	        return this.win.getSelection();
        } else if (doc.getSelection){
	        console.log('doc getSelection');
	        // Safari
	        return this.win.getSelection();
        } else if (doc.selection){
        	// IE
            this.win.focus();
            console.log('doc createRange text');
            return doc.selection.createRange();
        }
    },
    getCaretPositionRange : function () {

    	//var agileSelection = new Workspace.Agile.Selection(this.editor.doc.body);
    	//var agileSelection = new Workspace.Agile.Selection(this.el.dom.ownerDocument.body);
    	var agileSelection = new Workspace.Agile.Selection(this.iframe.ownerDocument.body);
    	agileSelection.setCursor(5,6);
    	var caret = agileSelection.getCaretPosition();
    	agileSelection.setCaretPosition(5, 2);

    	var sel = getCaretSelection();

        var bookmark = '~';
    	this.syncValue();
		var txtOrigine=this.getEditorBody().innerHTML;
	    var pos = 0;
		try {
//	        this.insertAtCursor(bookmark);

	        var text = bookmark;
	        this.win.focus();
            this.execCmd('InsertHTML', text);

            this.syncValue();

			var txt=this.getRawValue();
	        pos = txt.search(bookmark);
	        return {startOffset:pos, endOffset:pos};
		} finally {
		}
    }
    ,
    insertAtCursor : function(text){
        if(!this.activated){
            return;
        }
        if(Ext.isIE){
            this.win.focus();
            var doc = this.getDoc(),
                r = doc.selection.createRange();
            if(r){
                r.pasteHTML(text);
                this.syncValue();
            }
        }else{
            this.win.focus();
            this.execCmd('InsertHTML', text);
        }
    }
});
